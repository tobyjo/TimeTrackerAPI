// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeTracker.API.DbContexts;

#nullable disable

namespace TimeTracker.API.Migrations
{
    [DbContext(typeof(TimeTrackerContext))]
    [Migration("20251017104605_InitalCreate")]
    partial class InitalCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TimeTracker.API.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "BPC",
                            Description = "Berkshire Primary Care",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "Mag House",
                            Description = "Mag House",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 3,
                            Code = "GM",
                            Description = "Green Meadows",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 4,
                            Code = "KC",
                            Description = "Kings Corner",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 5,
                            Code = "Wat",
                            Description = "Waterfield",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 6,
                            Code = "BAD",
                            Description = "BAD PCN",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 7,
                            Code = "ASC",
                            Description = "Ascot PCN",
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("TimeTracker.API.Entities.SegmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("SegmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Board",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Strategy",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Recall",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Accounts",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Meeting",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pharmacy",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "ARRS",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Misc",
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("TimeTracker.API.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TeamName = "BPC"
                        });
                });

            modelBuilder.Entity("TimeTracker.API.Entities.TimeEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SegmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SegmentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeEntries");
                });

            modelBuilder.Entity("TimeTracker.API.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "auth0|68f21b733a56705ebbc3dab1",
                            TeamId = 1
                        },
                        new
                        {
                            Id = "auth0|68efba26b0f9e98d45be40b4",
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("TimeTracker.API.Entities.Project", b =>
                {
                    b.HasOne("TimeTracker.API.Entities.Team", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TimeTracker.API.Entities.SegmentType", b =>
                {
                    b.HasOne("TimeTracker.API.Entities.Team", "Team")
                        .WithMany("SegmentTypes")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TimeTracker.API.Entities.TimeEntry", b =>
                {
                    b.HasOne("TimeTracker.API.Entities.Project", "Project")
                        .WithMany("TimeEntries")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTracker.API.Entities.SegmentType", "SegmentType")
                        .WithMany("TimeEntries")
                        .HasForeignKey("SegmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTracker.API.Entities.User", "User")
                        .WithMany("TimeEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("SegmentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeTracker.API.Entities.User", b =>
                {
                    b.HasOne("TimeTracker.API.Entities.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TimeTracker.API.Entities.Project", b =>
                {
                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("TimeTracker.API.Entities.SegmentType", b =>
                {
                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("TimeTracker.API.Entities.Team", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("SegmentTypes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TimeTracker.API.Entities.User", b =>
                {
                    b.Navigation("TimeEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
